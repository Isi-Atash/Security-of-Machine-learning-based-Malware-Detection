import tensorflow as tf
from tensorflow.keras.datasets import mnist


#print me mnist dataset
(x_train, y_train), (x_test, y_test) = mnist.load_data()
print(x_train)
print(y_train)

#print me types
print(type(x_train))
#dimention
print(x_train.ndim)


# # Load the MNIST dataset
# (x_train, y_train), (x_test, y_test) = mnist.load_data()
#
# # Scale pixel values to range of 0 to 1
# x_train = x_train / 255.0
# x_test = x_test / 255.0
#
# # Flatten images into a 1D array
# x_train = x_train.reshape(x_train.shape[0], 784)
# x_test = x_test.reshape(x_test.shape[0], 784)
#
# # Define the model
# model = tf.keras.models.Sequential([
#     tf.keras.layers.Dense(128, activation='relu', input_shape=(784,)),
#     tf.keras.layers.Dense(10, activation='softmax')
# ])
#
#
# # Compile the model
# model.compile(loss='sparse_categorical_crossentropy',
#               optimizer='adam',
#               metrics=['accuracy'])
#
# # Train the model
# model.fit(x_train, y_train, epochs=10, batch_size=32, validation_data=(x_test, y_test))
#
#
# # Evaluate the model
# model.evaluate(x_test, y_test)