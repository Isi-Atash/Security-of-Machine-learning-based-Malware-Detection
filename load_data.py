import os
import tensorflow as tf
import numpy as np
import PIL
from sklearn.model_selection import train_test_split


def load_malware_images():
    malware_path_arm = 'grayscale_image_sample_data/malware/arm'
    malware_path_mips = 'grayscale_image_sample_data/malware/mips'

    malware_files = []
    for file_name in os.listdir(malware_path_arm):
        file_path = os.path.join(malware_path_arm, file_name)
        img = np.asarray(PIL.Image.open(file_path))
        malware_files.append(img)

    for file_name in os.listdir(malware_path_mips):
        file_path = os.path.join(malware_path_mips, file_name)
        img = np.asarray(PIL.Image.open(file_path))
        malware_files.append(img)

    return malware_files


def load_benign_images():
    benign_path_arm = 'grayscale_image_sample_data/benign/arm'
    benign_path_mips = 'grayscale_image_sample_data/malware/mips'

    benign_files = []
    for file_name in os.listdir(benign_path_arm):
        file_path = os.path.join(benign_path_arm, file_name)
        img = np.asarray(PIL.Image.open(file_path))
        benign_files.append(img)

    for file_name in os.listdir(benign_path_mips):
        file_path = os.path.join(benign_path_mips, file_name)
        img = np.asarray(PIL.Image.open(file_path))
        benign_files.append(img)

    return benign_files


import torchvision.transforms as transforms


def load_input_images_as_array(arm_path, mips_path, transforms):
    files = []
    for file_name in os.listdir(arm_path):
        # Get the path to the image
        file_path = os.path.join(arm_path, file_name)

        # Open the grayscale image using PIL
        img = PIL.Image.open(file_path)

        # Resize the image to 28x28 pixels
        img = img.resize((28, 28))

        # Transforms
        img = transforms(img)

        # Convert the image to a numpy array
        np_array = np.array(img)

        # Normalize the pixel values to be between 0 and 1
        normalized_array = np_array / 255.0

        # Reshape the array to match the MNIST input shape (28, 28, 1)
        reshaped_img = normalized_array.reshape((28, 28, 1))

        # Convert the data type to float32
        float32_array = reshaped_img.astype(np.float32)

        # Add the image to the list of images
        files.append(float32_array)

    for file_name in os.listdir(mips_path):
        # Get the path to the image
        file_path = os.path.join(mips_path, file_name)

        # Open the grayscale image using PIL
        img = PIL.Image.open(file_path)

        # Resize the image to 28x28 pixels
        img = img.resize((28, 28))

        # Transforms
        img = transforms(img)

        # Convert the image to a numpy array
        np_array = np.array(img)

        # Normalize the pixel values to be between 0 and 1
        normalized_array = np_array / 255.0

        # Reshape the array to match the MNIST input shape (28, 28, 1)
        reshaped_img = normalized_array.reshape((28, 28, 1))

        # Convert the data type to float32
        float32_array = reshaped_img.astype(np.float32)

        # Add the image to the list of images
        files.append(float32_array)

    # Return the list of images
    return files


def load_data_for_model():
    # path
    malware_path_arm = 'grayscale_image_sample_data/malware/arm'
    malware_path_mips = 'grayscale_image_sample_data/malware/mips'
    benign_path_arm = 'grayscale_image_sample_data/benign/arm'
    benign_path_mips = 'grayscale_image_sample_data/benign/mips'

    # Define the transformations
    train_transforms = transforms.Compose([
        transforms.RandomHorizontalFlip(),
        transforms.RandomRotation(12),
        transforms.ToTensor(),
        transforms.Normalize((0.5,), (0.5,))
    ])

    # Load the malware images
    malware_files = load_input_images_as_array(malware_path_arm, malware_path_mips, train_transforms)

    # Load the benign images
    benign_files = load_input_images_as_array(benign_path_arm, benign_path_mips, train_transforms)

    # Convert to tensor
    # malware_files = tf.convert_to_tensor(malware_files)
    # benign_files = tf.convert_to_tensor(benign_files)

    # Combine the malware and benign images into a single list
    all_files = np.concatenate((malware_files, benign_files), axis=0)

    # Create labels
    all_labels = np.concatenate((np.ones(len(malware_files)), np.zeros(len(benign_files))))

    # Split the data into training and testing sets
    x_train, x_test, y_train, y_test = train_test_split(all_files, all_labels, test_size=0.2, random_state=42)

    # Return the training and testing data
    return x_train, y_train, x_test, y_test

# x_train, y_train, x_test, y_test = load_data_for_model()
# print(x_train.shape)
# print(y_train.shape)

# (60000, 28, 28, 1)
# (60000, 2)
