import numpy as np
import os
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score, precision_score, recall_score, f1_score
from sklearn.model_selection import train_test_split

# Define the function to extract features from binary data
def extract_features(binary_data, n):
    features = []

    # Extract n-grams from the binary code
    ngrams = [binary_data[i:i + n] for i in range(len(binary_data) - n + 1)]
    for ngram in ngrams:
        feature = ''.join('{:02x}'.format(byte) for byte in ngram)
        features.append(feature)

    return features


# Load the dataset
malware_dir = 'ml-sample-data/ml-sample-pack-small/malware/arm'
benign_dir = 'ml-sample-data/ml-sample-pack-small/benign/arm'
batch_size = 1000  # Number of samples to process in each batch
X = []
y = []
for batch_num, filename_batch in enumerate([os.listdir(malware_dir)[i:i+batch_size] for i in range(0, len(os.listdir(malware_dir)), batch_size)]):
    batch_X = []
    for filename in filename_batch:
        with open(os.path.join(malware_dir, filename), 'rb') as f:
            binary_data = f.read()
            features = extract_features(binary_data)  # extract features from binary data
            batch_X.append(features)
    batch_y = [1] * len(batch_X)
    X.extend(batch_X)
    y.extend(batch_y)
    print("Processed batch {} of malware files".format(batch_num+1))
for batch_num, filename_batch in enumerate([os.listdir(benign_dir)[i:i+batch_size] for i in range(0, len(os.listdir(benign_dir)), batch_size)]):
    batch_X = []
    for filename in filename_batch:
        with open(os.path.join(benign_dir, filename), 'rb') as f:
            binary_data = f.read()
            features = extract_features(binary_data)  # extract features from binary data
            batch_X.append(features)
    batch_y = [0] * len(batch_X)
    X.extend(batch_X)
    y.extend(batch_y)
    print("Processed batch {} of benign files".format(batch_num+1))

# Split the dataset into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Train a logistic regression model
model = LogisticRegression()
model.fit(X_train, y_train)

# Evaluate the model
y_pred = model.predict(X_test)
accuracy = accuracy_score(y_test, y_pred)
precision = precision_score(y_test, y_pred)
recall = recall_score(y_test, y_pred)
f1 = f1_score(y_test, y_pred)
print("Accuracy: {:.2f}, Precision: {:.2f}, Recall: {:.2f}, F1 score: {:.2f}".format(accuracy, precision, recall, f1))
