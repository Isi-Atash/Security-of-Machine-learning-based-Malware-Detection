import tensorflow as tf
from sklearn.model_selection import train_test_split
import numpy as np
from sklearn.preprocessing import StandardScaler

import load_data

# Define the model
model = tf.keras.models.Sequential([
    tf.keras.layers.Reshape((90, 90, 1), input_shape=(90, 90)),
    tf.keras.layers.Conv2D(32, kernel_size=(3, 3), activation='relu'),
    tf.keras.layers.MaxPooling2D(pool_size=(2, 2)),
    tf.keras.layers.Flatten(),
    tf.keras.layers.Dense(128, activation='relu'),
    tf.keras.layers.Dense(1, activation='sigmoid')
])

# Compile the model
model.compile(loss='binary_crossentropy',
              optimizer='adam',
              metrics=['accuracy'])

# import load_data.py and use load_malware_images() and load_benign_images() to load the data
malware_images = tf.convert_to_tensor(load_data.load_malware_images())
benign_images = tf.convert_to_tensor(load_data.load_benign_images())

# Reshape the tensors to have 2 dimensions
malware_images_2d = tf.reshape(malware_images, (malware_images.shape[0], -1))
benign_images_2d = tf.reshape(benign_images, (benign_images.shape[0], -1))

# Convert tensors to numpy arrays for scaling
malware_images_2d_np = malware_images_2d.numpy()
benign_images_2d_np = benign_images_2d.numpy()

# Apply the StandardScaler
scaler = StandardScaler()
malware_images_scaled = scaler.fit_transform(malware_images_2d_np)
benign_images_scaled = scaler.fit_transform(benign_images_2d_np)

# Convert back to tensors
malware_images_scaled_2d = tf.convert_to_tensor(malware_images_scaled)
benign_images_scaled_2d = tf.convert_to_tensor(benign_images_scaled)

# Reshape the scaled tensors back to the original 3D shape
malware_images_scaled_3d = tf.reshape(malware_images_scaled_2d, malware_images.shape)
benign_images_scaled_3d = tf.reshape(benign_images_scaled_2d, benign_images.shape)

# Combine images and labels
# x = np.concatenate((malware_images, benign_images), axis=0)
# y = np.concatenate((np.ones(len(malware_images)), np.zeros(len(benign_images))))

x = np.concatenate((malware_images_scaled_3d, benign_images_scaled_3d), axis=0)
y = np.concatenate((np.ones(len(malware_images_scaled_3d)), np.zeros(len(benign_images_scaled_3d))))

# Shuffle data
shuffle_idx = np.random.permutation(len(x))
x = x[shuffle_idx]
y = y[shuffle_idx]

# Split data into training and testing sets
x_train, x_test, y_train, y_test = train_test_split(x, y, test_size=0.2)

# Train the model
model.fit(x_train, y_train, epochs=10, batch_size=32, validation_data=(x_test, y_test))

# Evaluate the model
model.evaluate(x_test, y_test)
