import os
import tensorflow as tf
from sklearn.model_selection import train_test_split
from tensorflow.keras.datasets import mnist
import numpy as np

def load_malware_images():
    malware_path_arm = 'grayscale_image_sample_data/malware/arm'
    malware_path_mips = 'grayscale_image_sample_data/malware/mips'

    malware_files = []
    for file_name in os.listdir(malware_path_arm):
        file_path = os.path.join(malware_path_arm, file_name)
        with open(file_path, 'rb') as f:
            malware_files.append(np.frombuffer(f.read(), dtype=np.uint8))

    for file_name in os.listdir( malware_path_mips):
        file_path = os.path.join(malware_path_mips, file_name)
        with open(file_path, 'rb') as f:
            malware_files.append(np.frombuffer(f.read(), dtype=np.uint8))

    tensor = tf.convert_to_tensor(malware_files)
    return tensor


def load_benign_images():
    benign_path_arm = 'grayscale_image_sample_data/benign/arm'
    benign_path_mips = 'grayscale_image_sample_data/malware/mips'

    benign_files = []
    for file_name in os.listdir(benign_path_arm):
        file_path = os.path.join(benign_path_arm, file_name)
        with open(file_path, 'rb') as f:
            benign_files.append(np.frombuffer(f.read(), dtype=np.uint8))

    for file_name in os.listdir(benign_path_mips):
        file_path = os.path.join(benign_path_mips, file_name)
        with open(file_path, 'rb') as f:
            benign_files.append(np.frombuffer(f.read(), dtype=np.uint8))

    tensor = tf.convert_to_tensor(benign_files)
    return tensor

# Define the model
model = tf.keras.models.Sequential([
    tf.keras.layers.Reshape((28, 28, 1), input_shape=(28, 28)),
    tf.keras.layers.Conv2D(32, kernel_size=(3, 3), activation='relu'),
    tf.keras.layers.MaxPooling2D(pool_size=(2, 2)),
    tf.keras.layers.Flatten(),
    tf.keras.layers.Dense(128, activation='relu'),
    tf.keras.layers.Dense(1, activation='sigmoid')
])

# Compile the model
model.compile(loss='binary_crossentropy',
              optimizer='adam',
              metrics=['accuracy'])


# Load malware and benign images
malware_images = load_malware_images() # replace with your own function
benign_images = load_benign_images() # replace with your own function

# Combine images and labels
x = np.concatenate((malware_images, benign_images), axis=0)
y = np.concatenate((np.ones(len(malware_images)), np.zeros(len(benign_images))))

# Shuffle data
shuffle_idx = np.random.permutation(len(x))
x = x[shuffle_idx]
y = y[shuffle_idx]

# Split data into training and testing sets
x_train, x_test, y_train, y_test = train_test_split(x, y, test_size=0.2)

# Train the model
model.fit(x_train, y_train, epochs=10, batch_size=32, validation_data=(x_test, y_test))
