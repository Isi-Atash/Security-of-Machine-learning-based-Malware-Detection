import os
import os
import io

import numpy as np
from PIL import Image, ImageOps


def read_binary_file(file_path):
    with open(file_path, 'rb') as f:
        binary_data = f.read()
    return binary_data

def binary_to_image(binary_data):
    image = Image.frombytes('L', (1, len(binary_data)), binary_data)
    image_size = 90
    image = image.resize((image_size, image_size))
    # image.save('npd-sample-data/benign/a/a.png')
    return np.array(image)

# def binary_to_image(binary_data, image_size):
#     # Convert the binary data to a PIL image
#     image = Image.open(io.BytesIO(binary_data))
#
#     # Resize the image in smaller chunks until the desired size is reached
#     while max(image.size) > image_size:
#         # Calculate the new size and resize the image
#         ratio = image_size / max(image.size)
#         new_size = tuple(int(dim * ratio) for dim in image.size)
#         image.thumbnail(new_size, resample=Image.BICUBIC)
#
#     # Pad the image with black pixels to make it square
#     padding = (0, 0, image_size - image.size[0], image_size - image.size[1])
#     image = ImageOps.expand(image, padding, fill=0)
#
#     # Convert the image to grayscale and normalize the pixel values
#     image = ImageOps.grayscale(image)
#     image = np.array(image) / 255.0
#
#     return image


def process_file(input_file_path, output_dir):
    binary_data = read_binary_file(input_file_path)
    img = binary_to_image(binary_data)
    return img
